"""
This file is the taken from
https://github.com/ToDor90/LFC/blob/master/ESA_PARAMETRIZATION/
collecting both scripts in one, replacing `numpy` by `jax.numpy` and performing
some qol changes.

See :cite:`Dornheim.2021`, and references therein.
"""

import jax.numpy as jnp

# implementation of the compressibility sum-rule for the LFC computed from the
# parametrization by Groth et al [PRL 119 (13), 135001 (2017)]


def qf(rs):
    return jnp.power(9 / 4 * jnp.pi, 1.0 / 3.0) / rs


def Ef(rs):
    return qf(rs) * qf(rs) * 0.5


def density(rs):
    return 3.0 / 4.0 / jnp.pi / rs**3


def inverse_temperature(rs, t):
    return 1.0 / (Ef(rs) * t)


def double(n, beta):
    return (
        -5.19703611962767
        * (
            0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.787623317899743
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.610887
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
        )
        * (
            1.22772285078429
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.256556487706084
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.24430125595146
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.206783496966467 * (1 / n) ** (1 / 3)
            + 0.356281366612692
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.384834731559127
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.48860251190292
            * (
                0.138727904981859 * (1 / n) ** (4 / 3)
                + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.48860251190292
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.384834731559127
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
        )
        / (
            0.6203504908994
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.787623317899743
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + (1 / n) ** (1 / 3)
        )
        ** 2
        + 2.59851805981384
        * (
            0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.787623317899743
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.610887
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
        )
        * (
            7.83351020439961
            * beta**2
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(2 / 3))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.519589683241859
            * beta
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 6))
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 2.04620475130715
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.427594146176807
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.36645188392719
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.275711329288622 * (1 / n) ** (1 / 3)
            - (
                1.22772285078429
                * beta
                * (
                    jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                    ** 2
                    - 1
                )
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                / (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.256556487706084
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.24430125595146
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.206783496966467 * (1 / n) ** (1 / 3)
                + 0.356281366612692
                * (
                    jnp.tanh(
                        2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                    )
                    ** 2
                    - 1
                )
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                / (
                    jnp.sqrt((1 / n) ** (2 / 3) / beta)
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                + 0.384834731559127
                * (
                    0.0474990773933948 * (1 / n) ** (4 / 3)
                    + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    beta**2
                    * (
                        1.0
                        + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                        + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                + 0.48860251190292
                * (
                    0.138727904981859 * (1 / n) ** (4 / 3)
                    + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    beta**2
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                - 0.48860251190292
                * (
                    0.255807007069129 * (1 / n) ** (4 / 3)
                    + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
                )
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    beta**2
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                    ** 2
                )
                - 0.384834731559127
                * (
                    0.879096948967545 * (1 / n) ** (4 / 3)
                    + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
                )
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    beta**2
                    * (
                        1.0
                        + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                        + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                    )
                    ** 2
                )
            )
            * (
                3.95815871445287
                * beta
                * (
                    jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                    ** 2
                    - 1
                )
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                / (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.827133987865867
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.787623317899743
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                + (2 / 3) * (1 / n) ** (1 / 3)
                + 1.1486453926913
                * (
                    jnp.tanh(
                        2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                    )
                    ** 2
                    - 1
                )
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                / (
                    jnp.sqrt((1 / n) ** (2 / 3) / beta)
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                + 1.2407009817988
                * (
                    0.0474990773933948 * (1 / n) ** (4 / 3)
                    + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    beta**2
                    * (
                        1.0
                        + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                        + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                + 1.57524663579949
                * (
                    0.138727904981859 * (1 / n) ** (4 / 3)
                    + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    beta**2
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                )
                - 1.57524663579949
                * (
                    0.255807007069129 * (1 / n) ** (4 / 3)
                    + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
                )
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    beta**2
                    * (
                        1.0
                        + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                        + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                    )
                    ** 2
                )
                - 1.2407009817988
                * (
                    0.879096948967545 * (1 / n) ** (4 / 3)
                    + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
                )
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    beta**2
                    * (
                        1.0
                        + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                        + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                    )
                    ** 2
                )
            )
            / (
                0.6203504908994
                * (
                    0.25388214
                    + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** (2 / 3)
                * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
                / (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                + 0.787623317899743
                * (
                    0.72700876
                    + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
                )
                * (1 / n) ** 0.5
                * jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                / (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                + (1 / n) ** (1 / 3)
            )
            + 0.59380227768782
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 2.45544570156858
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 2.45544570156858
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.513112975412169
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.384834731559127
            * (
                0.110831180584588 * (1 / n) ** (4 / 3)
                + 0.00120606479725998 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.48860251190292
            * (
                0.138727904981859 * (1 / n) ** (4 / 3)
                + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.48860251190292
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.48860251190292
            * (
                0.323698444957672 * (1 / n) ** (4 / 3)
                + 0.00563485898424465 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.48860251190292
            * (
                0.596883016494634 * (1 / n) ** (4 / 3)
                + 0.0136102067272276 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.513112975412169
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.384834731559127
            * (
                2.05122621425761 * (1 / n) ** (4 / 3)
                + 0.00430262896776615 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.712562733225384
            * (
                0.138727904981859 * (1 / n) ** (4 / 3)
                + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (1 / n) ** 0.5
            / (
                beta**2
                * jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.712562733225384
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            / (
                beta**2
                * jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.769669463118253
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.97720502380584
            * (
                0.138727904981859 * (1 / n) ** (4 / 3)
                + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**4
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.48860251190292
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.511614014138258 * (1 / n) ** (4 / 3)
                + 0.00742374912394234 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**4
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 3
            )
            + 0.384834731559127
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                1.75819389793509 * (1 / n) ** (4 / 3)
                + 0.00234688852787245 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 3
            )
        )
        / (
            0.6203504908994
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.787623317899743
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + (1 / n) ** (1 / 3)
        )
        ** 2
        + 5.19703611962767
        * (
            1.22772285078429
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.256556487706084
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.24430125595146
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.206783496966467 * (1 / n) ** (1 / 3)
            + 0.356281366612692
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.384834731559127
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.48860251190292
            * (
                0.138727904981859 * (1 / n) ** (4 / 3)
                + 0.00153677972297581 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.48860251190292
            * (
                0.255807007069129 * (1 / n) ** (4 / 3)
                + 0.00371187456197117 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.384834731559127
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
        )
        * (
            1.97907935722644
            * beta
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 1.94888836074774
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(2 / 3))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
            - 0.455447201932891
            * beta
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.206783496966467
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.131270552983291
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.574322696345651
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.787623317899743
            * (
                0.455406686753031 * (1 / n) ** (4 / 3)
                + 0.00152799071045914 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.610887
            * (
                0.483873388049956 * (1 / n) ** (4 / 3)
                + 0.0259873965749302 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.787623317899743
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.610887
            * (
                0.177213138552326 * (1 / n) ** (4 / 3)
                - 0.00168398610247062 * (1 / n) ** 2.0 / beta
                + 0.00866246552497673 * (1 / n) ** (8 / 3) / beta**2
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
            )
        )
        / (
            0.6203504908994
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.787623317899743
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + (1 / n) ** (1 / 3)
        )
        ** 2
        + 2
        * (
            1.97907935722644
            * beta
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 1.94888836074774
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(2 / 3))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
            - 0.455447201932891
            * beta
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.206783496966467
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.131270552983291
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.574322696345651
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.787623317899743
            * (
                0.455406686753031 * (1 / n) ** (4 / 3)
                + 0.00152799071045914 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.610887
            * (
                0.483873388049956 * (1 / n) ** (4 / 3)
                + 0.0259873965749302 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.787623317899743
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.610887
            * (
                0.177213138552326 * (1 / n) ** (4 / 3)
                - 0.00168398610247062 * (1 / n) ** 2.0 / beta
                + 0.00866246552497673 * (1 / n) ** (8 / 3) / beta**2
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
            )
        )
        / (
            0.384834731559127
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.48860251190292
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.6203504908994 * (1 / n) ** (1 / 3)
        )
        - (
            12.6275554211981
            * beta**2
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-1.0)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            - 2.90598998106732
            * beta**2
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-1.0)
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 12.4349211643332
            * beta**2
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(4 / 3))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
            - 1.45299499053366
            * beta**2
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-1.0)
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 1.97907935722644
            * beta
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.837574388775842
            * beta
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-0.5)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.649629453582579
            * beta
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(2 / 3))
            / (
                1.0
                + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
            )
            - 0.455447201932891
            * beta
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.275711329288622
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.153148978480506
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.574322696345651
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            / (
                jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 3.95815871445287
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (1 / n) ** (-(1 / 3))
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 3.95815871445287
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.910894403865781
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (-(1 / 3))
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 3.89777672149547
            * (
                0.483873388049956 * (1 / n) ** (4 / 3)
                + 0.0259873965749302 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(2 / 3))
            / (
                beta
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.910894403865781
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (-(1 / 3))
            * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 3.89777672149547
            * (
                jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3))) ** 2
                - 1
            )
            * (
                0.177213138552326 * (1 / n) ** (4 / 3)
                - 0.00168398610247062 * (1 / n) ** 2.0 / beta
                + 0.00866246552497673 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (-(2 / 3))
            / (
                beta
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.413566993932933
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.110831180584588 * (1 / n) ** (4 / 3)
                + 0.00120606479725998 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.413566993932933
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                2.05122621425761 * (1 / n) ** (4 / 3)
                + 0.00430262896776615 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.262541105966581
            * (
                0.455406686753031 * (1 / n) ** (4 / 3)
                + 0.00152799071045914 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.262541105966581
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.787623317899743
            * (
                1.06261560242374 * (1 / n) ** (4 / 3)
                + 0.00560263260501684 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 0.610887
            * (
                1.1290379054499 * (1 / n) ** (4 / 3)
                + 0.095287120774744 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 0.787623317899743
            * (
                2.15255959327442 * (1 / n) ** (4 / 3)
                + 0.0131688718310692 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**2
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.610887
            * (
                0.41349732328876 * (1 / n) ** (4 / 3)
                - 0.00505195830741186 * (1 / n) ** 2.0 / beta
                + 0.0317623735915813 * (1 / n) ** (8 / 3) / beta**2
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**2
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            + 1.1486453926913
            * (
                0.455406686753031 * (1 / n) ** (4 / 3)
                + 0.00152799071045914 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (1 / n) ** (1 / 6)
            / (
                beta**2
                * jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
            )
            - 1.1486453926913
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                jnp.tanh(
                    2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta)
                )
                ** 2
                - 1
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            / (
                beta**2
                * jnp.sqrt((1 / n) ** (2 / 3) / beta)
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            - 1.2407009817988
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.0474990773933948 * (1 / n) ** (4 / 3)
                + 0.000328926762889085 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.6203504908994
            * (
                0.8759442
                - 0.230130843551
                * jnp.exp(-4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            )
            * (
                0.879096948967545 * (1 / n) ** (4 / 3)
                + 0.00117344426393622 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                1.75819389793509 * (1 / n) ** (4 / 3)
                + 0.00234688852787245 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                    + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 3
            )
            - 1.57524663579949
            * (
                0.455406686753031 * (1 / n) ** (4 / 3)
                + 0.00152799071045914 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**4
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.610887
            * (
                0.483873388049956 * (1 / n) ** (4 / 3)
                + 0.0259873965749302 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.967746776099912 * (1 / n) ** (4 / 3)
                + 0.0519747931498604 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.75
                + 0.132909853914244 * (1 / n) ** (4 / 3) / beta**2
                - 0.00084199305123531 * (1 / n) ** 2.0 / beta**3
                + 0.00324842457186627 * (1 / n) ** (8 / 3) / beta**4
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 3
            )
            - 1.221774
            * (
                0.483873388049956 * (1 / n) ** (4 / 3)
                + 0.0259873965749302 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.177213138552326 * (1 / n) ** (4 / 3)
                - 0.00168398610247062 * (1 / n) ** 2.0 / beta
                + 0.00866246552497673 * (1 / n) ** (8 / 3) / beta**2
            )
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                beta**4
                * (
                    1.0
                    + 0.362905041037467 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00974527371559882 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 2
            )
            + 0.787623317899743
            * (
                0.922525539974749 * (1 / n) ** (4 / 3)
                + 0.00359151049938252 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                1.8450510799495 * (1 / n) ** (4 / 3)
                + 0.00718302099876505 * (1 / n) ** (8 / 3) / beta**2
            )
            * (
                0.3436902
                + 0.341555015064773 * (1 / n) ** (4 / 3) / beta**2
                + 0.000572996516422177 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (1 / 6)
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                beta**4
                * (
                    1.0
                    + 0.691894154981062 * (1 / n) ** (4 / 3) / beta**2
                    + 0.00134681643726845 * (1 / n) ** (8 / 3) / beta**4
                )
                ** 3
            )
        )
        / (
            0.384834731559127
            * (
                0.25388214
                + 0.0356243080450461 * (1 / n) ** (4 / 3) / beta**2
                + 0.000123347536083407 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** (2 / 3)
            * jnp.tanh(4.78539000031365 * beta * (1 / n) ** (-(2 / 3)))
            / (
                1.0
                + 0.659322711725659 * (1 / n) ** (4 / 3) / beta**2
                + 0.000440041598976084 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.48860251190292
            * (
                0.72700876
                + 0.104045928736395 * (1 / n) ** (4 / 3) / beta**2
                + 0.00057629239611593 * (1 / n) ** (8 / 3) / beta**4
            )
            * (1 / n) ** 0.5
            * jnp.tanh(2.18755342799065 / jnp.sqrt((1 / n) ** (2 / 3) / beta))
            / (
                1.0
                + 0.191855255301847 * (1 / n) ** (4 / 3) / beta**2
                + 0.00139195296073919 * (1 / n) ** (8 / 3) / beta**4
            )
            + 0.6203504908994 * (1 / n) ** (1 / 3)
        )
    ) / n


# This is actually the new, consistently T-dependent implementation.


def Groth_A(rs, t):
    n = density(rs)
    beta = inverse_temperature(rs, t)
    factor = double(n, beta)
    return -qf(rs) ** 2 / (4.0 * jnp.pi) * factor


# Analytical Parametrization of the same-spin component of the ontop
# pair-distribution function g(0) taken from Dornheim et al [PRL 125 (23),
# 235001 (2020)]
def OnTop(rs, t):

    # Fit coefficients taken from ground-state QMC study by Spink et al [Phys
    # Rev B 88, 085121 (2013)]
    a_Spink = 0.18315
    b_Spink = -0.0784043
    c_Spink = 1.02232
    d_Spink = 0.0837741

    # Finite-T fit coefficients obtained from fit to restricted PIMC data by
    # Brown et al [PRL 110, 146405 (2013)]
    alpha_1_a = 18.4377
    beta_1_a = 24.1339
    beta_2_a = 1.86499
    alpha_1_b = -0.24368
    beta_1_b = 0.252577
    beta_2_b = 0.127043
    alpha_1_c = 2.23663
    beta_1_c = 0.445526
    beta_2_c = 0.408504
    alpha_2_c = 0.448937
    alpha_1_d = 0.0589015
    beta_1_d = -0.598508
    beta_2_d = 0.513162

    return (
        1.0
        + (a_Spink + alpha_1_a * t)
        / (1.0 + t * beta_1_a + t * t * t * beta_2_a)
        * jnp.sqrt(rs)
        + (b_Spink + alpha_1_b * jnp.sqrt(t))
        / (1.0 + t * beta_1_b + t * t * beta_2_b)
        * rs
    ) / (
        1.0
        + (c_Spink + alpha_1_c * jnp.sqrt(t) + alpha_2_c * t * jnp.sqrt(t))
        / (1.0 + t * beta_1_c + t * t * beta_2_c)
        * rs
        + (d_Spink + alpha_1_d * jnp.sqrt(t))
        / (1.0 + t * beta_1_d + t * t * beta_2_d)
        * rs
        * rs
        * rs
    )


# Definition of the activation function used in the ESA
# x: q/q_F (q_F is Fermi wave number, see above)
# a: x_m
# b: eta
def Activation(x, a, b):
    return 0.5 * (jnp.tanh(b * (x - a)) + 1.0)


# Implementation of the theta-dependent ESA parameter x_m(theta), for the
# activation function
def x_m(theta):
    A_x = 2.64
    B_x = 0.31
    C_x = 0.08
    return A_x + B_x * theta + C_x * theta**2


# Fitted coefficients for the analytical parametrization of G(q;rs,t) within
# the ESA

ABCD = [
    0.66477593,
    -4.59280227,
    1.24649624,
    -1.27089927,
    1.26706839,
    -0.4327608,
    2.09717766,
    1.15424724,
    -0.65356955,
    -1.0206202,
    5.16041218,
    -0.23880981,
    1.07356921,
    -1.67311761,
    0.58928105,
    0.8469662,
    1.54029035,
    -0.71145445,
    -2.31252076,
    5.83181391,
    2.29489749,
    1.76614589,
    -0.09710839,
    -0.33180686,
    0.56560236,
    1.10948188,
    -0.43213648,
    1.3742155,
    -4.01393906,
    -1.65187145,
    -1.75381153,
    -1.17022854,
    0.76772906,
    0.63867766,
    1.07863273,
    -0.35630091,
]


# Functional form for q-dependence of G_ESA
# y=(x,rs,theta)
# x=q/q_F
def G_fit_wrap_extended(y, alpha, beta, gamma, delta):
    my_x = y[0]
    myRS = y[1]
    myTHETA = y[2]

    # compute the first part of ESA, i.e., fit to the neural-net representation
    # [Dornheim et al, J. Chem. Phys. 151, 194104 (2019)] of the static LFC
    # Groth_A gives pre-factor to the exact compressibility sum-rule (CSR)
    # computed from the prametrization of fxc by Groth et al [PRL 119 (13),
    # 135001 (2017)]
    G_ML_fit = (
        Groth_A(myRS, myTHETA)
        * my_x
        * my_x
        * (1.0 + alpha * my_x + beta * my_x**0.5)
        / (
            1.0
            + gamma * my_x
            + delta * my_x**1.25
            + Groth_A(myRS, myTHETA) * my_x**2
        )
    )

    # Obtain the value of the full ontop PDF g(0). Factor 0.5, because, OnTop
    # returns only same-spin component
    onTop = 0.5 * OnTop(myRS, myTHETA)

    # consistent large-q limit of an effectively static theory for the LFC
    Ginfty = 1.0 - onTop

    # width of transition between limits in the activation function is constant
    # in this analytical representation
    ETA = 3.0

    # the position (wave-number) of the transition depends on theta only and
    # has been parametrized above
    XM = x_m(myTHETA)

    # the final result for the LFC within ESA is given by the combination of
    # the static LFC (G_ML) and the large-g limit (Ginfty), connected by the
    # Activation function
    A = Activation(my_x, XM, ETA)
    return G_ML_fit * (1.0 - A) + A * Ginfty


# rs-dependent representation of the four parameters in G_fit_wrap_extended(y,
# alpha, beta, gamma, delta)
def alpha_extended(rs, a, b, c):
    return (a + b * rs) / (1.0 + c * rs)


def beta_extended(rs, a, b, c):
    return (a + b * rs) / (1.0 + c * rs)


def gamma_extended(rs, a, b, c):
    return (a + b * rs) / (1.0 + c * rs)


def delta_extended(rs, a, b, c):
    return (a + b * rs) / (1.0 + c * rs)


# theta-dependence of the parameters in alpha_extended, beta_extended, ...
def f_extended(t, a, b, c):
    return a + b * t + c * t**1.5


# Analytical representation of the static LFC within ESA
def G_analytical(k_over_k_f, rs, theta):
    # Determination of first rs-parameter alpha
    # y = [x,rs,theta]
    # x = q/q_F

    y = jnp.array([k_over_k_f, rs, theta])

    a = ABCD[0]
    b = ABCD[1]
    c = ABCD[2]
    my_alpha_a = f_extended(theta, a, b, c)

    a = ABCD[3]
    b = ABCD[4]
    c = ABCD[5]
    my_alpha_b = f_extended(theta, a, b, c)

    a = ABCD[6]
    b = ABCD[7]
    c = ABCD[8]
    my_alpha_c = f_extended(theta, a, b, c)

    my_alpha = alpha_extended(rs, my_alpha_a, my_alpha_b, my_alpha_c)

    # Determination of second rs-parameter beta

    a = ABCD[9]
    b = ABCD[10]
    c = ABCD[11]
    my_beta_a = f_extended(theta, a, b, c)

    a = ABCD[12]
    b = ABCD[13]
    c = ABCD[14]
    my_beta_b = f_extended(theta, a, b, c)

    a = ABCD[15]
    b = ABCD[16]
    c = ABCD[17]
    my_beta_c = f_extended(theta, a, b, c)

    my_beta = beta_extended(rs, my_beta_a, my_beta_b, my_beta_c)

    # Determination of third rs-parameter gamma

    a = ABCD[18]
    b = ABCD[19]
    c = ABCD[20]
    my_gamma_a = f_extended(theta, a, b, c)

    a = ABCD[21]
    b = ABCD[22]
    c = ABCD[23]
    my_gamma_b = f_extended(theta, a, b, c)

    a = ABCD[24]
    b = ABCD[25]
    c = ABCD[26]
    my_gamma_c = f_extended(theta, a, b, c)

    my_gamma = gamma_extended(rs, my_gamma_a, my_gamma_b, my_gamma_c)

    # Determination of fourth rs-parameter delta

    a = ABCD[27]
    b = ABCD[28]
    c = ABCD[29]
    my_delta_a = f_extended(theta, a, b, c)

    a = ABCD[30]
    b = ABCD[31]
    c = ABCD[32]
    my_delta_b = f_extended(theta, a, b, c)

    a = ABCD[33]
    b = ABCD[34]
    c = ABCD[35]
    my_delta_c = f_extended(theta, a, b, c)

    my_delta = delta_extended(rs, my_delta_a, my_delta_b, my_delta_c)

    return_value = G_fit_wrap_extended(
        y, my_alpha, my_beta, my_gamma, my_delta
    )
    return return_value


# Example value:
#
# k = 2.6
# rs = 10
# theta = 2
# print(
#     "Example value: G_ESA(2.6,10.0,2.0) = ",
#     G_analytical(k, rs, theta, ABCD),
# )
