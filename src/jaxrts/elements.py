"""
This submodule contains data for different chemical elements.
"""

from typing import Any

import jax
import jpu.numpy as jnpu
from jax import numpy as jnp

from .helpers import invert_dict, orbital_array, orbital_map
from .units import Quantity, ureg
from .absorption_edges_ionized_ions_data import ENERGY_DATA as _absorption_edges_ionized_atoms

_element_symbols = {
    1: "H",  # Hydrogen
    2: "He",  # Helium
    3: "Li",  # Lithium
    4: "Be",  # Beryllium
    5: "B",  # Boron
    6: "C",  # Carbon
    7: "N",  # Nitrogen
    8: "O",  # Oxygen
    9: "F",  # Fluorine
    10: "Ne",  # Neon
    11: "Na",  # Sodium
    12: "Mg",  # Magnesium
    13: "Al",  # Aluminum
    14: "Si",  # Silicon
    15: "P",  # Phosphorus
    16: "S",  # Sulfur
    17: "Cl",  # Chlorine
    18: "Ar",  # Argon
    19: "K",  # Potassium
    20: "Ca",  # Calcium
    21: "Sc",  # Scandium
    22: "Ti",  # Titanium
    23: "V",  # Vanadium
    24: "Cr",  # Chromium
    25: "Mn",  # Manganese
    26: "Fe",  # Iron
    27: "Co",  # Cobalt
    28: "Ni",  # Nickel
    29: "Cu",  # Copper
    30: "Zn",  # Zinc
    31: "Ga",  # Gallium
    32: "Ge",  # Germanium
    33: "As",  # Arsenic
    34: "Se",  # Selenium
    35: "Br",  # Bromine
    36: "Kr",  # Krypton
}
_element_names = {
    1: "Hydrogen",
    2: "Helium",
    3: "Lithium",
    4: "Beryllium",
    5: "Boron",
    6: "Carbon",
    7: "Nitrogen",
    8: "Oxygen",
    9: "Fluorine",
    10: "Neon",
    11: "Sodium",
    12: "Magnesium",
    13: "Aluminum",
    14: "Silicon",
    15: "Phosphorus",
    16: "Sulfur",
    17: "Chlorine",
    18: "Argon",
    19: "Potassium",
    20: "Calcium",
    21: "Scandium",
    22: "Titanium",
    23: "Vanadium",
    24: "Chromium",
    25: "Manganese",
    26: "Iron",
    27: "Cobalt",
    28: "Nickel",
    29: "Copper",
    30: "Zinc",
    31: "Gallium",
    32: "Germanium",
    33: "Arsenic",
    34: "Selenium",
    35: "Bromine",
    36: "Krypton",
}
_element_masses = {
    1: 1.008,
    2: 4.002602,
    3: 6.94,
    4: 9.0121831,
    5: 10.81,
    6: 12.011,
    7: 14.007,
    8: 15.999,
    9: 18.998403163,
    10: 20.1797,
    11: 22.98976928,
    12: 24.305,
    13: 26.9815385,
    14: 28.085,
    15: 30.973761998,
    16: 32.06,
    17: 35.45,
    18: 39.948,
    19: 39.0983,
    20: 40.078,
    21: 44.955908,
    22: 47.867,
    23: 50.9415,
    24: 51.9961,
    25: 54.938044,
    26: 55.845,
    27: 58.933194,
    28: 58.6934,
    29: 63.546,
    30: 65.38,
    31: 69.723,
    32: 72.63,
    33: 74.921595,
    34: 78.971,
    35: 79.904,
    36: 83.798,
}

# Taken from the python package mendeleev
# L. M. Mentel, mendeleev - A Python resource for properties of chemical
# elements, ions and isotopes. , 2014-- . Available at:
# https://github.com/lmmentel/mendeleev.
# which cites John C Slater. Atomic Radii in Crystals. The Journal of Chemical
# Physics, 41(10):3199, 1964. URL:
# http://scitation.aip.org/content/aip/journal/jcp/41/10/10.1063/1.1725697,
# doi:10.1063/1.1725697.
# For Z=36 krypton, where no empirical value is supplied, we use the calculated
# value of E. Clementi; D.L.Raimondi; W.P. Reinhardt (1967). "Atomic Screening
# Constants from SCF Functions. II. Atoms with 37 to 86 Electrons". The Journal
# of Chemical Physics. 47 (4): 1300–1307.
# See https://en.wikipedia.org/wiki/Atomic_radii_of_the_elements_(data_page)
# in pm
_atomic_radii_emp = {
    1: 25.0,
    2: 120.0,
    3: 145.0,
    4: 105.0,
    5: 85.0,
    6: 70.0,
    7: 65.0,
    8: 60.0,
    9: 50.0,
    10: 160.0,
    11: 180.0,
    12: 150.0,
    13: 125.0,
    14: 110.0,
    15: 100.0,
    16: 100.0,
    17: 100.0,
    18: 71.0,
    19: 220.0,
    20: 180.0,
    21: 160.0,
    22: 140.0,
    23: 135.0,
    24: 140.0,
    25: 140.0,
    26: 140.0,
    27: 135.0,
    28: 135.0,
    29: 135.0,
    30: 135.0,
    31: 130.0,
    32: 125.0,
    33: 115.0,
    34: 115.0,
    35: 115.0,
    36: 88.0,
}
# E. Clementi; D.L.Raimondi; W.P. Reinhardt (1967). "Atomic Screening
# Constants from SCF Functions. II. Atoms with 37 to 86 Electrons". The Journal
# of Chemical Physics. 47 (4): 1300–1307.
# See https://en.wikipedia.org/wiki/Atomic_radii_of_the_elements_(data_page)
# in pm
_atomic_radii_calc = {
    1: 53,
    2: 31,
    3: 167,
    4: 112,
    5: 87,
    6: 67,
    7: 56,
    8: 48,
    9: 42,
    10: 38,
    11: 190,
    12: 145,
    13: 118,
    14: 111,
    15: 98,
    16: 88,
    17: 79,
    18: 71,
    19: 243,
    20: 194,
    21: 184,
    22: 176,
    23: 171,
    24: 166,
    25: 161,
    26: 156,
    27: 152,
    28: 149,
    29: 145,
    30: 142,
    31: 136,
    32: 125,
    33: 114,
    34: 103,
    35: 94,
    36: 88,
}

# These Values are taken from Shannon, R. D., "Revised effective ionic radii
# and systematic studies of interatomic distances in halides and
# chalcogenides", Acta Crystallographica Section A, vol. 32, no 5, 1976. as
# they are presented by Baloch, Ahmer A. B. and Alqahtani, Saad M. and Mumtaz,
# Faisal and Muqaibel, Ali H. and Rashkeev, Sergey N. and Alharbi, Fahhad H.,
# "Extending Shannon's ionic radii database using machine learning", Physical
# Review Materials, vol. 5, no 4, 2021. at https://cmd-ml.github.io/.
#
# The entries are formatted as follows: (Oxidation State, Coordination Number,
# radius [Angstrom]
_ionic_radii = {
    1: [],
    2: [],
    3: [(1, 4, 0.59), (1, 6, 0.76), (1, 8, 0.92)],
    4: [(2, 3, 0.16), (2, 4, 0.27), (2, 6, 0.45)],
    5: [(3, 3, 0.01), (3, 4, 0.11), (3, 6, 0.27)],
    6: [(4, 4, 0.15), (4, 6, 0.16)],
    7: [(5, 6, 0.13), (3, 6, 0.16), (-3, 4, 1.46)],
    8: [
        (-2, 2, 1.35),
        (-2, 3, 1.36),
        (-2, 4, 1.38),
        (-2, 6, 1.4),
        (-2, 8, 1.42),
    ],
    9: [
        (7, 6, 0.08),
        (-1, 2, 1.285),
        (-1, 3, 1.3),
        (-1, 4, 1.31),
        (-1, 6, 1.33),
    ],
    10: [],
    11: [
        (1, 4, 0.99),
        (1, 5, 1),
        (1, 6, 1.02),
        (1, 7, 1.12),
        (1, 8, 1.18),
        (1, 9, 1.24),
        (1, 12, 1.39),
    ],
    12: [(2, 4, 0.57), (2, 5, 0.66), (2, 6, 0.72), (2, 8, 0.89)],
    13: [(3, 4, 0.39), (3, 5, 0.48), (3, 6, 0.535)],
    14: [(4, 4, 0.26), (4, 6, 0.4)],
    15: [(5, 4, 0.17), (5, 5, 0.29), (5, 6, 0.38), (3, 6, 0.44)],
    16: [(6, 4, 0.12), (6, 6, 0.29), (4, 6, 0.37), (-2, 6, 1.84)],
    17: [(7, 4, 0.08), (5, 3, 0.12), (7, 6, 0.27), (-1, 6, 1.81)],
    18: [],
    19: [
        (1, 4, 1.37),
        (1, 6, 1.38),
        (1, 7, 1.46),
        (1, 8, 1.51),
        (1, 9, 1.55),
        (1, 10, 1.59),
        (1, 12, 1.64),
    ],
    20: [
        (2, 6, 1),
        (2, 7, 1.06),
        (2, 8, 1.12),
        (2, 9, 1.18),
        (2, 10, 1.23),
        (2, 12, 1.34),
    ],
    21: [(3, 6, 0.745), (3, 8, 0.87)],
    22: [
        (4, 4, 0.42),
        (4, 5, 0.51),
        (4, 6, 0.605),
        (3, 6, 0.67),
        (4, 8, 0.74),
        (2, 6, 0.86),
    ],
    23: [
        (5, 4, 0.355),
        (5, 5, 0.46),
        (4, 5, 0.53),
        (5, 6, 0.54),
        (4, 6, 0.58),
        (3, 6, 0.64),
        (4, 8, 0.72),
        (2, 6, 0.79),
    ],
    24: [
        (6, 4, 0.26),
        (5, 4, 0.345),
        (4, 4, 0.41),
        (6, 6, 0.44),
        (5, 6, 0.49),
        (4, 6, 0.55),
        (5, 8, 0.57),
        (3, 6, 0.615),
        (2, 6, 0.73),
    ],
    25: [
        (7, 4, 0.25),
        (6, 4, 0.255),
        (5, 4, 0.33),
        (4, 4, 0.39),
        (7, 6, 0.46),
        (4, 6, 0.53),
        (3, 5, 0.58),
        (3, 6, 0.645),
        (2, 4, 0.66),
        (2, 5, 0.75),
        (2, 6, 0.83),
        (2, 7, 0.9),
        (2, 8, 0.96),
    ],
    26: [
        (6, 4, 0.25),
        (3, 4, 0.49),
        (3, 5, 0.58),
        (4, 6, 0.585),
        (2, 4, 0.64),
        (3, 6, 0.645),
        (2, 6, 0.78),
        (3, 8, 0.78),
        (2, 8, 0.92),
    ],
    27: [
        (4, 4, 0.4),
        (4, 6, 0.53),
        (2, 4, 0.58),
        (3, 6, 0.61),
        (2, 5, 0.67),
        (2, 6, 0.745),
        (2, 8, 0.9),
    ],
    28: [(4, 6, 0.48), (2, 4, 0.55), (3, 6, 0.6), (2, 5, 0.63), (2, 6, 0.69)],
    29: [
        (1, 2, 0.46),
        (3, 6, 0.54),
        (2, 4, 0.57),
        (1, 4, 0.6),
        (2, 5, 0.65),
        (2, 6, 0.73),
        (1, 6, 0.77),
    ],
    30: [(2, 4, 0.6), (2, 5, 0.68), (2, 6, 0.74), (2, 8, 0.9)],
    31: [(3, 4, 0.47), (3, 5, 0.55), (3, 6, 0.62)],
    32: [(4, 4, 0.39), (4, 6, 0.53), (2, 6, 0.73)],
    33: [(5, 4, 0.335), (5, 6, 0.46), (3, 6, 0.58)],
    34: [(6, 4, 0.28), (6, 6, 0.42), (4, 6, 0.5), (-2, 6, 1.98)],
    35: [
        (7, 4, 0.25),
        (5, 3, 0.31),
        (7, 6, 0.39),
        (3, 4, 0.59),
        (-1, 6, 1.96),
    ],
    36: [],
}

# This data is taken from hephaestus https://bruceravel.github.io/demeter/
_cold_absorption_edges = {
    1: [13.6, 0, 0, 0, 0, 0, 0, 0, 0],
    2: [24.6, 0, 0, 0, 0, 0, 0, 0, 0],
    3: [54.8, 5.3, 0, 0, 0, 0, 0, 0, 0],
    4: [111.5, 8, 3, 0, 0, 0, 0, 0, 0],
    5: [188, 12.6, 4.7, 0.0, 0, 0, 0, 0, 0],
    6: [284.2, 18, 7.2, 0.0, 0, 0, 0, 0, 0],
    7: [409.9, 37.3, 17.5, 0.0, 0, 0, 0, 0, 0],
    8: [543.1, 41.6, 18.2, 0.0, 0, 0, 0, 0, 0],
    9: [696.7, 45, 19.9, 0.0, 0, 0, 0, 0, 0],
    10: [870.2, 48.5, 21.65, 0.0, 0, 0, 0, 0, 0],
    11: [1070.8, 63.5, 30.4, 0.0, 0, 0, 0, 0, 0],
    12: [1303, 88.6, 49.4, 2, 1, 0, 0, 0, 0],
    13: [1559, 117.8, 72.7, 4, 2, 0, 0, 0, 0],
    14: [1839, 149.7, 99.5, 8, 2, 0, 0, 0, 0],
    15: [2145.5, 189, 135.5, 12.0, 6.5, 0, 0, 0, 0],
    16: [2472.0, 230.9, 163.05, 14.0, 7.5, 0, 0, 0, 0],
    17: [2822.0, 270.0, 201.0, 18, 10, 0, 0, 0, 0],
    18: [3205.9, 326.3, 249.3, 29.3, 15.8, 0, 0, 0, 0, 0],
    19: [3608.4, 378.6, 294.95, 34.8, 18.3, 0, 0, 0, 0, 0],
    20: [4038.5, 438.4, 347.95, 44.3, 25.4, 0, 0, 0, 0, 0],
    21: [4492.0, 498.0, 401.15, 51.1, 28.3, 0, 0, 0, 0, 0],
    22: [4966.0, 560.9, 457.0, 58.7, 32.6, 2, 0, 0, 0, 0],
    23: [5465.0, 626.7, 515.95, 66.3, 37.2, 2, 0, 0, 0, 0],
    24: [5989.0, 696.0, (583.8 + 574.1) / 2, 74.1, 42.2, 2, 0, 0, 0, 0],
    25: [6539, 769.1, (649.9 + 638.7) / 2, 82.3, 47.2, 2, 0, 0, 0, 0],
    26: [7112, 844.6, (719.9 + 706.8) / 2, 91.3, 52.7, 2, 0, 0, 0, 0],
    27: [7709, 925.1, (778.1 + 793.2) / 2, 101, 58.9, 3, 0, 0, 0, 0],
    28: [
        8333,
        1008.6,
        (870.0 + 852.7) / 2,
        110.8,
        (68.0 + 66.2) / 2,
        4,
        0,
        0,
        0,
        0,
    ],
    29: [
        8979,
        1096.7,
        (952.3 + 932.7) / 2,
        122.5,
        (77.3 + 75.1) / 2,
        5,
        0,
        0,
        0,
        0,
    ],
    30: [
        9659.0,
        1196.2,
        (1044.9 + 1021.8) / 2,
        139.8,
        (91.4 + 88.6) / 2,
        10.15,
        0,
        1,
        0,
        0,
    ],
    31: [
        10367,
        1299,
        (1143.2 + 1116.4) / 2,
        159.51,
        (103.5 + 100.0) / 2,
        18.7,
        1,
        2,
        0,
        0,
    ],
    32: [
        11103,
        1414.6,
        (1248.1 + 1217) / 2,
        180.1,
        (124.9 + 120.8) / 2,
        (29.8 + 29.2) / 2,
        5,
        3,
        0,
        0,
    ],
    33: [
        11867,
        1527,
        (1359.1 + 1323.6) / 2,
        204.7,
        (146.2 + 141.2) / 2,
        41.7,
        8,
        3,
        0,
        0,
    ],
    34: [
        12658,
        1652,
        (1474.3 + 1433.9) / 2,
        229.6,
        (166.5 + 160.7) / 2,
        55.56,
        12,
        3,
        0,
        0,
    ],
    35: [
        13474,
        1782,
        (1596 + 1550) / 2,
        257,
        (189 + 182) / 2,
        (70 + 69) / 2,
        27,
        3,
        0,
        0,
    ],
    36: [
        14326,
        1921,
        (1730.9 + 1678.4) / 2,
        292.8,
        (222.2 + 214.4) / 2,
        (95.0 + 93.8) / 2,
        27.5,
        14.1,
        0,
        0,
    ],
}


max_Z = max(d['Z'] for d in _absorption_edges_ionized_atoms)
max_charge_state = max(max(ion_data['ions'].keys()) for ion_data in _absorption_edges_ionized_atoms) if _absorption_edges_ionized_atoms else 0


_idx_to_orbital = invert_dict(orbital_map)
num_orbitals = len(orbital_map)

# Initialize a 3D array: Atomic number x Charge x Orbital_Idx
_edge_position_table_ionization_states = jnp.zeros((max_Z + 1, max_charge_state + 1, num_orbitals), dtype=jnp.float32)

# Fill the _edge_position_table_ionization_states with ionization energies
for element_data in _absorption_edges_ionized_atoms:
    Z = element_data['Z']
    for charge, ion_info in element_data['ions'].items():
        for orbital, energy in ion_info['ionization_energies_eV'].items():
            if orbital in orbital_map:
                orbital_idx = orbital_map[orbital]
                _edge_position_table_ionization_states = _edge_position_table_ionization_states.at[Z, charge, orbital_idx].set(energy)

# fmt: off

# Ionization energies, statistical weights and electronic configuration were
# calculated using the python package mendeleev. To see the script used, see
# `tools/ionization_econfig.py` For these three quantities, there is a list for
# each ionization state, starting from no ionization to fully ionized. (for
# ionization energies, this results in Z entries, for electron configuration
# and statistical weights, the entries are of lengths (Z+1)

_ionization_energies = {
    1: [13.598434599702],
    2: [24.587389011, 54.4177655282],
    3: [5.391714996, 75.640097, 122.45435913],
    4: [9.322699, 18.21115, 153.896205, 217.71858459],
    5: [8.298019, 25.15483, 37.93059, 259.374379, 340.2260225],
    6: [11.260288, 24.383143, 47.88778, 64.49352, 392.09056, 489.99320779],
    7: [14.53413, 29.60125, 47.4453, 77.4735, 97.8901, 552.06741, 667.0461377],
    8: [13.618055, 35.12112, 54.93554, 77.4135, 113.899, 138.1189, 739.32697,
        871.4099138],
    9: [17.42282, 34.97081, 62.70798, 87.175, 1103.1175302, 114.249, 157.16311,
        185.1868, 953.8983],
    10: [21.564541, 40.96297, 63.4233, 97.19, 1195.8082, 126.247, 157.934,
         207.271, 239.097, 1362.199256],
    11: [5.13907696, 47.28636, 71.62, 98.936, 299.856, 138.404, 172.23,
         208.504, 264.192, 1465.0992, 1648.702285],
    12: [7.646236, 15.035271, 80.1436, 109.2654, 327.99, 141.33, 186.76,
         225.02, 265.924, 367.489, 1761.8049, 1962.663889],
    13: [5.985769, 18.82855, 28.447642, 119.9924, 330.21, 153.8252, 190.49,
         241.76, 284.64, 398.65, 442.005, 2085.97693, 2304.140359],
    14: [8.15168, 16.34585, 33.493, 45.14179, 351.28, 166.767, 205.279,
         246.57, 303.59, 401.38, 476.273, 523.415, 2437.65805, 2673.177958],
    15: [10.486686, 19.76949, 30.20264, 51.44387, 372.31, 65.02511, 220.43,
         263.57, 309.6, 424.4, 479.44, 560.62, 611.741, 2816.90868,
         3069.842145],
    16: [10.36001, 23.33788, 34.86, 47.222, 379.84, 72.5945, 88.0529, 280.954,
         328.794, 447.7, 504.55, 564.41, 651.96, 706.994, 3223.78057,
         3494.188518],
    17: [12.967633, 23.81364, 39.8, 53.24, 400.851, 67.68, 96.94, 114.2013,
         348.306, 456.7, 530.0, 591.58, 656.3, 750.23, 809.198, 3658.34366,
         3946.29179],
    18: [15.7596119, 27.62967, 40.735, 59.58, 422.6, 74.84, 91.29, 124.41,
         143.4567, 479.76, 540.4, 619.0, 685.5, 755.13, 855.5, 918.375,
         4120.66559, 4426.22407],
    19: [4.34066373, 31.625, 45.8031, 60.917, 175.8174, 82.66, 99.44, 117.56,
         154.87, 503.67, 565.6, 631.1, 714.7, 786.3, 4934.04979, 860.92,
         967.7, 1034.542, 4610.80714],
    20: [6.11315547, 11.871719, 50.91316, 67.2732, 188.54, 84.34, 108.78,
         127.21, 147.24, 211.275, 591.6, 658.2, 728.6, 817.2, 5128.8576,
         894.0, 973.7, 1086.8, 1157.726, 5469.86358],
    21: [6.56149, 12.79977, 24.756839, 73.4894, 180.03, 91.95, 110.68, 137.99,
         158.08, 225.18, 249.798, 687.36, 757.7, 833.2, 1287.957, 926.5,
         1008.6, 1093.5, 1213.1, 5674.9036, 6033.75643],
    22: [6.82812, 13.5755, 27.49171, 43.26717, 192.1, 99.299, 119.533, 140.68,
         170.5, 215.92, 265.07, 291.5, 787.67, 864.0, 1346.3, 944.5, 1042.5,
         1130.2, 1220.3, 1425.257, 6249.0226, 6625.81023],
    23: [6.746187, 14.634, 29.3111, 46.709, 206.0, 65.28165, 128.125, 150.72,
         173.55, 230.5, 254.8, 308.5, 336.274, 896.0, 1354.2, 977.2, 1062.9,
         1165.2, 1258.9, 1486.7, 1569.656, 6851.3112, 7246.12624],
    24: [6.76651, 16.486305, 30.959, 49.16, 209.5, 69.46, 90.6349, 160.29,
         184.76, 244.5, 270.8, 296.7, 354.7, 384.163, 1394.5, 1011.6, 1097.2,
         1188.0, 1294.8, 1495.1, 1634.1, 1721.183, 7481.8624, 7894.80289],
    25: [7.434038, 15.63999, 33.668, 51.21, 221.89, 72.41, 95.604, 119.203,
         195.5, 248.6, 286.1, 314.4, 343.6, 402.95, 1430.9, 435.172, 1133.7,
         1224.1, 1320.3, 1537.2, 1643.2, 1788.7, 1879.873, 8140.7864,
         8571.95438],
    26: [7.9024681, 16.19921, 30.651, 54.91, 233.6, 75.0, 98.985, 124.9671,
         151.06, 262.1, 290.9, 330.8, 361.0, 392.2, 1460.0, 456.2, 489.312,
         1262.7, 1357.8, 1575.6, 1687.0, 1798.4, 1950.4, 2045.759, 8828.1864,
         9277.6886],
    27: [7.88101, 17.0844, 33.5, 51.27, 186.14, 79.5, 102.0, 128.9, 157.8,
         275.4, 305.32, 336.1, 378.5, 410.0, 1504.5, 441.1, 511.96, 546.588,
         1397.2, 1606.0, 1724.0, 1844.0, 1960.8, 2119.4, 2218.876, 9544.1817,
         10012.1297],
    28: [7.639878, 18.168838, 35.187, 54.92, 193.2, 76.06, 108.0, 132.0, 162.0,
         224.7, 319.5, 351.6, 384.5, 429.3, 1540.1, 462.8, 495.4, 571.07,
         607.02, 1646.0, 1758.0, 1880.0, 2008.1, 2130.5, 2295.6, 2399.259,
         10288.8848, 10775.3948],
    29: [7.72638, 20.29239, 36.841, 57.38, 198.0, 79.8, 103.0, 139.0, 166.0,
         232.2, 265.33, 367.0, 401.0, 436.0, 670.608, 483.1, 518.7, 552.8,
         632.5, 1690.5, 1800.0, 1918.0, 2044.0, 2179.4, 11567.6237, 2307.3,
         2479.1, 2586.954, 11062.4309],
    30: [9.394197, 17.96439, 39.7233, 59.573, 203.0, 82.6, 108.0, 133.9,
         173.9, 238.0, 274.4, 310.8, 417.6, 453.4, 697.5, 490.6, 540.0, 577.8,
         613.3, 737.366, 1846.8, 1961.0, 2085.0, 2214.0, 11864.9401, 2358.0,
         2491.5, 2669.9, 2781.996, 12388.9427],
    31: [5.999302, 20.51514, 30.72576, 63.241, 211.0, 86.01, 112.7, 140.8,
         169.9, 244.0, 280.0, 319.0, 356.0, 471.2, 677.0, 508.8, 548.3, 599.8,
         640.0, 765.7, 807.308, 2010.0, 2129.0, 2258.0, 2984.426, 2391.0,
         2543.9, 2683.0, 2868.0, 12696.5581, 13239.5029],
    32: [7.899435, 15.93461, 34.0576, 45.7155, 212.5, 90.5, 115.9, 144.9,
         176.4, 252.1, 286.0, 326.0, 367.0, 407.0, 706.7, 527.9, 567.3, 609.1,
         662.8, 744.0, 837.1, 880.44, 2178.2, 2304.0, 3074.0, 2439.0, 2575.0,
         2737.1, 2881.9, 3194.293, 13557.4218, 14119.4457],
    33: [9.78855, 18.5892, 28.349, 50.15, 213.0, 62.77, 121.19, 147.0, 180.0,
         247.0, 296.0, 333.0, 375.0, 418.0, 728.9, 460.0, 587.6, 628.8, 672.9,
         774.0, 814.0, 911.7, 956.79, 2356.9, 3088.1, 2486.0, 2626.0, 2766.0,
         2938.0, 3287.0, 3411.643, 14447.6799, 15028.9251],
    34: [9.752368, 21.196, 31.697, 42.947, 219.0, 68.3, 81.83, 155.327, 184.0,
         255.0, 291.0, 342.9, 383.0, 426.0, 739.8, 473.0, 517.0, 650.5, 693.4,
         798.0, 845.8, 887.0, 989.6, 1036.36, 3146.0, 2540.7, 2674.0, 2820.0,
         2964.0, 3301.8, 3507.0, 3636.526, 15367.493, 15968.1075],
    35: [11.81381, 21.591, 34.871, 47.782, 224.0, 59.595, 87.39, 103.03,
         192.61, 261.0, 301.0, 338.0, 393.0, 436.0, 761.0, 481.0, 530.0,
         577.0, 716.3, 809.8, 870.0, 920.8, 963.0, 1070.6, 3169.0, 1119.17,
         2731.4, 2869.0, 3021.0, 3361.0, 3523.1, 3735.0, 3868.986, 16317.014,
         16937.1497],
    36: [13.9996055, 24.35984, 35.838, 50.85, 233.0, 64.69, 78.49, 109.13,
         125.802, 268.0, 308.0, 350.0, 391.0, 446.0, 785.316, 492.0, 540.0,
         591.0, 640.0, 831.6, 882.8, 945.0, 999.0, 1042.0, 3228.0, 1155.0,
         1205.23, 2928.9, 3072.0, 3380.0, 3584.0, 3752.0, 3971.0, 4109.083,
         17296.424, 17936.2405],
}
# fmt: on

# Ionization energies, statistical weights and electronic configuration were
# calculated using the python package mendeleev. To see the script used, see
# `tools/ionization_econfig.py` For these three quantities, there is a list for
# each ionization state, starting from no ionization to fully ionized. (for
# ionization energies, this results in Z entries, for electron configuration
# and statistical weights, the entries are of lengths (Z+1)

_ionization_econf = {
    1: [
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    2: [
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    3: [
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    4: [
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    5: [
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    6: [
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    7: [
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    8: [
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    9: [
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    10: [
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    11: [
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    12: [
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    13: [
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    14: [
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    15: [
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    16: [
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    17: [
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    18: [
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    19: [
        orbital_array(2, 2, 6, 2, 6, 0, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    20: [
        orbital_array(2, 2, 6, 2, 6, 0, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    21: [
        orbital_array(2, 2, 6, 2, 6, 1, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    22: [
        orbital_array(2, 2, 6, 2, 6, 2, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    23: [
        orbital_array(2, 2, 6, 2, 6, 3, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    24: [
        orbital_array(2, 2, 6, 2, 6, 5, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    25: [
        orbital_array(2, 2, 6, 2, 6, 5, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    26: [
        orbital_array(2, 2, 6, 2, 6, 6, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    27: [
        orbital_array(2, 2, 6, 2, 6, 7, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    28: [
        orbital_array(2, 2, 6, 2, 6, 8, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    29: [
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    30: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    31: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    32: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 2, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    33: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 3, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 2, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    34: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 4, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 3, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 2, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    35: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 5, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 4, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 3, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 2, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
    36: [
        orbital_array(2, 2, 6, 2, 6, 10, 2, 6, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 5, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 4, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 3, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 2, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 1, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 2, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 1, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 10, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 9, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 8, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 7, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 6, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 5, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 4, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 3, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 2, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 1, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 6, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 5, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 4, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 3, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 2, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 1, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 2, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 1, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 6, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 5, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 4, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 3, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 2, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 1, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(2, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        orbital_array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    ],
}

# fmt: off

# Ionization energies, statistical weights and electronic configuration were
# calculated using the python package mendeleev. To see the script used, see
# `tools/ionization_econfig.py` For these three quantities, there is a list for
# each ionization state, starting from no ionization to fully ionized. (for
# ionization energies, this results in Z entries, for electron configuration
# and statistical weights, the entries are of lengths (Z+1)

# This is the stat. weight of the electornic system (in the ground-state
# configuration), the statistical weight is given as g = 2J + 1, where
# :math:`\vec{J} = \vec{L} + \vec{S}` and the vectors L and S are summs of the
# the vectors l and s of all atoms.

_ionization_statistical_weights = {
    1: [2.0, 1.0],
    2: [1.0, 2.0, 1.0],
    3: [2.0, 1.0, 2.0, 1.0],
    4: [1.0, 2.0, 1.0, 2.0, 1.0],
    5: [2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    6: [1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    7: [4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    8: [5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    9: [4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    10: [1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    11: [2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    12: [1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    13: [2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    14: [1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0,
         1.0],
    15: [4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0,
         2.0, 1.0],
    16: [5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0,
         1.0, 2.0, 1.0],
    17: [4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0,
         2.0, 1.0, 2.0, 1.0],
    18: [1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0,
         1.0, 2.0, 1.0, 2.0, 1.0],
    19: [2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0,
         2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    20: [1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0,
         1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    21: [4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0,
         4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    22: [5.0, 6.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0,
         5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    23: [4.0, 5.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0,
         4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    24: [7.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0,
         1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    25: [6.0, 7.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0,
         2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    26: [9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0,
         1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    27: [10.0, 11.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0,
         1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0,
         1.0],
    28: [9.0, 10.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0,
         4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0,
         2.0, 1.0],
    29: [2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0,
         4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0,
         2.0, 1.0],
    30: [1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0, 4.0,
         5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0,
         1.0, 2.0, 1.0],
    31: [2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0, 1.0,
         4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0,
         2.0, 1.0, 2.0, 1.0],
    32: [1.0, 2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0, 4.0,
         1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0,
         1.0, 2.0, 1.0, 2.0, 1.0],
    33: [4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0, 5.0,
         4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0, 1.0,
         2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    34: [5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0, 4.0,
         5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0, 4.0,
         1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    35: [4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0, 1.0,
         4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0, 5.0,
         4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
    36: [1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 6.0, 9.0, 10.0, 9.0, 6.0,
         1.0, 4.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 4.0,
         5.0, 4.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0],
}
# fmt: on


def electron_distribution(atomic_number: int) -> jnp.ndarray:
    """
    Returns number of electrons for each orbital (defined by the quantum
    numbers n and l) for a neutral atom with the given ``atomic_number``.

    Parameter,
    ----------
    atomic_number: int
        The atomic number of the element.

    Returns
    -------
    jnp.ndarray
        The number of electrons per orbital as a flat array, starting with
        ``1s``, up to ``4f``.
        To find the corresponding indices for individual orbitals, one can use
        :py:data:`~.helpers.orbital_map`
    """
    return _ionization_econf[atomic_number][0]


@jax.jit
def electron_distribution_ionized_state(Z_core: float) -> jnp.ndarray:
    """
    Interpolate between electron populations if the number of core electrons is
    not an integer.

    Assume the population of electrons be behave like a neutral atom with
    reduced number of electrons. I.e., a 1.5 times ionized carbon is like
    Beryllium (and half a step to Boron).

    .. warning::

       This function is only approximate, and fives wrong results for high-Z
       materials. A proper alternative is using the
       :py:attr:~Element.ionization` attribute of an :py:class:`Element`.

    Parameters
    ------------
    Z_core: float
        Number of electrons still bound to the core

    Returns
    -------
    jnp.ndarray
        An array of populations.
    """
    S1s = jnpu.interp(Z_core, jnp.array([0, 2]), jnp.array([0, 2]))
    S2s = jnpu.interp(Z_core, jnp.array([2, 4]), jnp.array([0, 2]))
    S2p = jnpu.interp(Z_core, jnp.array([4, 10]), jnp.array([0, 6]))
    S3s = jnpu.interp(Z_core, jnp.array([10, 12]), jnp.array([0, 2]))
    S3p = jnpu.interp(Z_core, jnp.array([12, 18]), jnp.array([0, 6]))
    S4s = jnpu.interp(Z_core, jnp.array([18, 20]), jnp.array([0, 2]))
    S3d = jnpu.interp(Z_core, jnp.array([20, 30]), jnp.array([0, 10]))
    S4p = jnpu.interp(Z_core, jnp.array([30, 36]), jnp.array([0, 6]))
    # Note: the lines below are wrong, but we are only interested in Z<37
    S4d = jnpu.interp(Z_core, jnp.array([0, 99]), jnp.array([0, 0]))
    S4f = jnpu.interp(Z_core, jnp.array([0, 99]), jnp.array([0, 0]))
    return jnp.array(
        [
            S1s,
            S2s,
            S2p,
            S3s,
            S3p,
            S3d,
            S4s,
            S4p,
            S4d,
            S4f,
        ]
    )


class Ionization:
    """
    This class contains information of the ionization states of an atom.
    """

    def __init__(self, Z: int) -> None:
        self.econfs = jnp.array(_ionization_econf[Z])
        self.energies = (
            jnp.array(_ionization_energies[Z]) * 1 * ureg.electron_volt
        )
        self.statistical_weights = jnp.array(
            _ionization_statistical_weights[Z]
        )


class Element:
    def __init__(self, identifier: str | int) -> None:
        if isinstance(identifier, str):
            #: The atomic number of the element
            self.Z = invert_dict(_element_symbols)[identifier]
            #: The abbreviated symbol of the element
            self.symbol = identifier
        else:
            self.Z = int(identifier)
            self.symbol = _element_symbols[self.Z]
        #: The name of the element
        self.name: str = _element_names[self.Z]
         #: The electron distribution, returned as a flat array
        self.electron_distribution = electron_distribution_ionized_state(
            self.Z
        )
        #: The atomic mass of this element
        self.atomic_mass: Quantity = _element_masses[self.Z] * (
            1 * ureg.atomic_mass_constant
        )
        self.atomic_radius_calc = _atomic_radii_calc[self.Z] * ureg.picometer
        self.ionization = Ionization(self.Z)

        Eb = _cold_absorption_edges[self.Z]
        Eb1s = Eb[0]
        Eb2s = Eb[1]
        Eb2p = 1 / 2 * (Eb[2] + Eb[3])
        Eb3s = Eb[4]
        Eb3p = 1 / 2 * (Eb[5] + Eb[6])
        Eb3d = 1 / 2 * (Eb[7] + Eb[8])
        Eb4s = 0
        Eb4p = 0
        Eb4d = 0
        Eb4f = 0
        
        #: Returns the binding energies of the electrons in the ground state 
        #: of the neutral atom, i.e., the binding energies of the electrons 
        #: in the neutral atom.
        self.cold_binding_energies = jnp.array(
            [Eb1s, Eb2s, Eb2p, Eb3s, Eb3p, Eb3d, Eb4s, Eb4p, Eb4d, Eb4f]
        ) * (1 * ureg.electron_volt)

    def get_binding_energies(self, ion_charge: int | jnp.ndarray) -> jnp.ndarray:
        safe_Z = jnp.clip(self.Z, 0, _edge_position_table_ionization_states.shape[0] - 1)
        safe_ion_charge = jnp.round(ion_charge).astype(jnp.int32)
        safe_ion_charge = jnp.clip(safe_ion_charge, 0, _edge_position_table_ionization_states.shape[1] - 1)
        orbital_energies = _edge_position_table_ionization_states[safe_Z, safe_ion_charge, :]
        return orbital_energies * (1 * ureg.electron_volt)

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, Element):
            raise NotImplementedError(
                "Cannot compare {} to an object of type {}".format(
                    type(self), type(other)
                )
            )
        if isinstance(other, MixElement):
            return False
        return self.Z == other.Z

    def __repr__(self) -> str:
        return f"Element {self.name} ({self.symbol}) Z={self.Z}"

    def __hash__(self) -> int:
        return self.Z


class MixElement(Element):
    """
    This helper class is used to define Average Atoms to perform calculations
    on.

    This class is not intended to be used everywhere, where a real
    :py:class:`~.Element` can be used. Rather, we see it as a convenience tool.
    """

    def __init__(self, Zmix, avgMass, name=""):
        self.Z: float = Zmix
        self.electron_distribution = electron_distribution_ionized_state(
            self.Z
        )
        self.atomic_mass: Quantity = avgMass
        self.symbol = "MIX"
        self.name = name

        # These are entries that do not make semse for an Average Atom
        self.binding_energies = jnp.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) * (
            1 * ureg.electron_volt
        )

        self.atomic_radius_calc = 0 * ureg.picometer
